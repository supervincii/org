#+TITLE: Millionaire Career Plan
#+DESCRIPTION: The ultimate career plan curated for me, the one and only, Vinci.

* Table of Contents :toc:
- [[#phase-1-building-strong-foundations][Phase 1: Building Strong Foundations]]
  - [[#computer-systems--c-programming-fundamentals][Computer Systems & C Programming Fundamentals]]
  - [[#data-structures--algorithm-analysis][Data Structures & Algorithm Analysis]]
  - [[#advanced-data-structures--graph-algorithms][Advanced Data Structures & Graph Algorithms]]
  - [[#memory-management--system-calls][Memory Management & System Calls]]
  - [[#phase-1-capstone-project][Phase 1 Capstone Project]]
- [[#phase-2-systems-deep-dive][Phase 2: Systems Deep Dive]]
  - [[#network-programming--distributed-concepts][Network Programming & Distributed Concepts]]
  - [[#database-systems--storage][Database Systems & Storage]]
  - [[#compilers--language-implementation][Compilers & Language Implementation]]
  - [[#phase-2-capstone-project][Phase 2 Capstone Project]]
- [[#phase-3-advanced-system--specialization][Phase 3: Advanced System & Specialization]]
  - [[#advanced-c--system-programming][Advanced C & System Programming]]
  - [[#go-programming--concurrent-systems][Go Programming & Concurrent Systems]]
  - [[#backend-engineering--architecture][Backend Engineering & Architecture]]
  - [[#interview-preparation][Interview Preparation]]
  - [[#capstone-project][Capstone Project]]

* Phase 1: Building Strong Foundations

** Computer Systems & C Programming Fundamentals

*** Resources
- C Programming: A Modern Approach by K.N. King
- Computer Systems: A Programmer's Perspective by Bryant and O'Hallaron (Chapters 1-3)
  
*** Projects
- Create a basic text file processor that counts words, lines, and characters.
- Implement bit manipulation utilities (set, clear, toggle bits).
- Build a simple calculator in C that handles integer and floating point arithmetic.

** Data Structures & Algorithm Analysis

*** Resources
- The Algorithm Design Manual by Steven Skiena
- Data Structures and Algorithm Analysis in C

*** Projects
- Build a generic dynamic array library in C with proper memory management.
- Implement a hash table with chaining and open addressing.
- Create a binary search tree with insertion, deletion, and traversal operations.
- Build a simple expression evaluator using stacks.

** Advanced Data Structures & Graph Algorithms

*** Resources
- The Algorithm Design Manual by Steven Skiena
- Algorithms by Sedgewick & Wayne (Graph sections)

*** Projects
- Implement a priority queue using binary heap.
- Build a graph library with adjacency list and matrix representations.
- Create a shortest path finder for a simple map/maze.
- Develop a basic task scheduler using priority queues.

** Memory Management & System Calls

*** Resources
- Advanced Programming in the UNIX Environment by W. Richard Stevens
- CS: APP (Chapters 4-6)

*** Projects
- Build a custom memory allocator (simple version)
- Create a basic shell that can execute commands and handle pipes.
- Implement a file compression utility using Huffman coding.
- Develop a simple process monitoring tool.

** Phase 1 Capstone Project
Build a multi-threaded web server in C that can handle basic HTTP requests, serve static files, and maintain connection statistics. This integrates memory management, system calls, data structures, and provide foundation for networking concepts.

* Phase 2: Systems Deep Dive

*** Resources
- Operating System Concepts by Silberschatz, Galvin, & Gagne (Chapters 1-7)
- The Linux Programming Interface by Michael Kerrisk

*** Projects:
- Implement various CPU scheduling algorithms simulation.
- Build a thread pool library in C.
- Create a simple memory manager with virtual memory simulation.
- Develop a basic file system organizer tool.

** Network Programming & Distributed Concepts

*** Resources
- Unix Network Programming by Stevens (Volume 1, Chapters 1-8)
- Designing Data-Intensive Applications by Martin Kleppmann (Chapters 1-4)

*** Projects
- Build a chat server/client using TCP sockets.
- Implement a basic HTTP server with proper protocol handling.
- Create a distributed key-value store (simplified version).
- Develop a network monitoring tool.

** Database Systems & Storage

*** Resources
- Database System Concepts by Silberschatz, Korth, & Sudarshan (Chapters 1-8, 11-13)
- Designing Data-Intensive Applications by Martin Kleppmann (Chapters 5-9)
- *Implementation*: Database Design and Implementation by Sciore

*** Projects
- Build a simple relational database engine with SQL support.
- Implement a B+ tree index structure.
- Create a transaction log and recovery system.
- Develop a database connection pool library.

** Compilers & Language Implementation

*** Resources
- Crafting Interpreters by Robert Nystrom
- Writing an Interpreter and Compiler in Go by Thorsten Ball
- *Theory*: Compilers: Principles, Techniques, and Tools by Aho et al.

*** Projects
- Build a lexer and parser for a simple language.
- Implement an interpreter for arithmetic expressions with variables.
- Create a basic compiler that generates bytecode.
- Develop a simple garbage collector.

** Phase 2 Capstone Project
Design and implement a distributed database system with a custom query language. This integrates OS concepts (processes, threads), networking (client-server communication), database systems (storage, indexing), and language implementation (query parser).

* Phase 3: Advanced System & Specialization

** Advanced C & System Programming

*** Resources
- *Core*: Expert C Programming by Peter van der Linden
- *Performance*: Systems Performance by Brendan Gregg (C related sections)
- *Advanced*: Advanced C and C++ Compiling by Milan Stevanovic

*** Projects
- Optimize your previous projects for performance
- Build a high performance memory pool allocator
- Create a profiling and debugging toolkit
- Develop a cross platform system monitoring library

** Go Programming & Concurrent Systems

*** Resources
- The Go Programming Language by Donovan & Kernighan
- *Concurrency*: Concurrency in Go by Katherin Cox-Buday
- *Web Systems*: Building Microservices with Go by Nic Jackson

*** Projects
- Build a concurrent web crawler with rate limiting
- Implement a REST API with proper middleware and error handling
- Create a distributed job processing system
- Develop a real-time processing pipeline

*** Additional Focus Area
- Study Perl 5 fundamentals through "Learning Perl" by Schwartz
- Understand legacy codebase navigation and refactoring patterns
- Practice reading and understanding large, unfamiliar codebase

** Backend Engineering & Architecture

*** Resources
- Designing Data-Intensive Applications (complete remaining chapters)
- *Architecture*: Software Architecture Patterns by Richards
- *Microservices*: Building Microservices by Newman
- *Performance*: High Performance Browser Networking by Grigorik

*** Projects
- Design a scalable API architecture for a mobile app
- Implement caching layers with Redis integration
- Build a microservices communication framework
- Create a comprehensive logging and monitoring system

** Interview Preparation

*** Resources
- System Design Interview by Alex Yu
- Cracking the Coding Interview by McDowell
- The Tech Resume Inside Out by Gergely Orosz

*** Projects
- Complete a system design for a large-scale application
- Solve medium to hard LeetCode problems in multiple languages
- Prepare technical presentations of major projects
- Build a portfolio website showcasing my journey

** Capstone Project
Develop a complete backend system for your mobile travel app that demonstrates all learned concepts. Include comprehensive documentation and testing.
