#+TITLE: Millionaire Career Plan
#+DESCRIPTION: The ultimate career plan curated for me, the one and only, Vinci.

* Table of Contents :toc:
- [[#q1-fundamentals--c-programming][Q1: Fundamentals & C Programming]]
  - [[#c-basics-and-computer-architecture-introduction][C Basics and Computer Architecture Introduction]]
  - [[#computer-architecture--memory-management][Computer Architecture & Memory Management]]
  - [[#operating-systems-fundamentals][Operating Systems Fundamentals]]
  - [[#file-systems-and-io][File Systems and I/O]]
  - [[#basic-data-structures-implementation][Basic Data Structures Implementation]]
  - [[#algorithm-implementation-and-analysis][Algorithm Implementation and Analysis]]
- [[#q2-advanced-c-programming--backend-fundamentals][Q2: Advanced C Programming & Backend Fundamentals]]
  - [[#socket-programming-and-networking][Socket Programming and Networking]]
  - [[#advanced-concurrency-patterns][Advanced Concurrency Patterns]]

* Q1: Fundamentals & C Programming

** C Basics and Computer Architecture Introduction

*** Resources
- C Programming: A Modern Approach by K.N. King
- Computer Systems: A Programmer's Perspective by Bryant and O'Hallaron
  
*** Project: Memory Visualizer in C
Create a tool that visualizes how data is stored in memory.

Requirements:
- Implement functions to allocate various data types (int, char, float, arrays, structs).
- Display memory addresses and content in a formatted, readable way.
- Show how complex structures are laid out in memory.
- Visualize stack vs heap allocation
- Demonstrate pointer arithmetic and its effects.
- Include documentation explaining memory concepts illustrated by the tool.
  
Input: Function calls to allocate and manipulate data.
Output: Visual representation of memory layout with addresses and content.

** Computer Architecture & Memory Management 

*** Resources
- Continue with CS:APP
- Understanding and Using C Pointers by Richard Reese

*** Project: CPU Simulator in C
Build a program that simulates the execution of a simplified instruction set architecture.

Requirements:
- Implement a register file with at least 8 general-purpose registers.
- Support basic operations: ADD, SUB, LOAD, STORE, JUMP, BRANCH.
- Include a program counter and instruction memory.
- Support sequential execution of a program loaded from a file.
- Implement memory addressing modes (direct, indirect, indexed).
- Provide debugging features showing register state after each instruction.
- Handle basic error conditions (invalid opcodes, memory access violations).

Input: Assembly-like text file with instructions.
Output: Register state after each instruction execution and final memory state.

** Operating Systems Fundamentals

*** Resources
- Operating Systems: Three Easy Pieces by Remzi H. Arpaci-Dusseau
- The Linux Programming Interface

*** Project: Command-line Shell in C
Create a shell that can execute commands and manage processes

Requirements:
- Support executing external programs with fork() and exec()
- Implement built-in commands: cd, pwd, echo, exit, history
- Handle input/output redirection (>, <, >>)
- Support pipes (|) to connect multiple commands
- Implement background process execution with &
- Manage a history of executed commands with recall functionality
- Handle signals (Ctrl+C, Ctrl+Z) appropriately
- Implement proper error handling and reporting

Input: User-entered command lines.
Output: Execution results of commands and appropriate shell prompts.

** File Systems and I/O

*** Resources
- Continue with OSTEP
- Advanced Programming in the UNIX Environment by W. Richard Stevens

*** Project: Virtual File System in C
Implement a simplified file system that supports basic file operations.

Requirements:
- Create an in-memory file system with directories and files
- Support operations: create, delete, read, write, list, move
- Implement proper file descriptors and file table
- Add basic permission system (read/write/execute)
- Support file metadata (creation time, modification time, size)
- Implement persistent storage by saving to a disk file
- Include error handling for common file system errors
- Add simple journaling for crash recovery

Input: File system operation commands
Output: Operation results and file system state

** Basic Data Structures Implementation

*** Resources
- Mastering Algorithms with C by Kyle Loudon
- Algorithms in C by Robert Sedgewick

*** Project: Data Structures Library in C
Build a comprehensive library of fundamental data structures with testing.

Requirements:
- Implement: Linked list (singly and doubly linked), Stack, Queue, Binary search tree, Hash table
- Each structure should support standard operations (insert, delete, search)
- Design a consistent API across all data structures
- Implement generic versions using void pointers and function pointers for comparisons
- Include memory management (proper allocation/deallocation)
- Write comprehensive test cases for each data structure
- Document the time and space complexity of each operation
- Implement serialization/deserialization for persistent storage

Input: Library API calls
Output: Operation results and structure state

** Algorithm Implementation and Analysis

*** Resources
- Introduction to Algorithms by CLRS
- The Algorithm Design Manual by Steven Skiena

*** Project: Pathfinding Visualization in C
Create a tool that visualizes different pathfinding algorithms.

Requirements:
- Implement BFS, DFS, Dijkstra's algorithm, and A* search
- Create a grid-based environment with obstacles
- Visualize the search process showing explored nodes (using a simple text-based or basic graphical output)
- Allow users to place start, end points, and obstacles
- Calculate and display performance metrics (nodes explored, path length, time)
- Support different heuristics for A*
- Implement a map file format for saving and loading grid configurations
- Compare algorithm performance across different scenarios

Input: Grid configurations and algorithm selection
Output: Visual representation of the search process and resulting path

* Q2: Advanced C Programming & Backend Fundamentals

** Socket Programming and Networking

*** Resources
- Unix Network Programming by W. Richard Stevens
- Beej's Guide to Network Programming

*** Project: HTTP Server in C
Build a simple but functional HTTP server from scratch.

Requirements:
- Handle basic HTTP methods (GET, HEAD, POST)
- Serve static files from a specified directory
- Implement proper HTTP response codes and headers
- Support concurrent connections using either multi-processing or multi-threading
- Include detailed request logging
- Support common MIME types
- Implement request timeout handling
- Add security features (directory traversal prevention, request size limiting)
- Support basic configuration (port, document root, log file)
- Implement simple caching for static content

Input: HTTP requests received on a configured port
Output: HTTP responses with appropriate headers and content

** Advanced Concurrency Patterns

*** Resources
- The Art of Multiprocessor Programming by Maurice Herlihy and Nir Shavit
- C Concurrency in Action

*** Project: Thread Pool and Task Scheduler in C
Create a thread pool implementation with task scheduling system

Requirements:
- Implement a configurable thread pool with worker threads
- Create a task queue for pending work items
- Support task priorities and dependencies
- Implement thread synchronization using mutexes and condition variables
- Add cancellation and timeout support for tasks
- Include deadlock detection or prevention mechanisms
- Provide statistical monitoring (throughput, latency, queue length)
- Implement graceful shutdown

Input: Task submission API calls
Output: Task execution results and performance metrics
