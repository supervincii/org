#+TITLE: Node.js
#+DESCRIPTION: Personal notes on Node.js

* Table of Contents :toc@4:
- [[#preface][Preface]]
- [[#documentation-notes][Documentation Notes]]
  - [[#introduction-to-nodejs][Introduction to Node.js]]
    - [[#example-nodejs-application][Example Node.js Application]]
  - [[#javascript-concepts][JavaScript Concepts]]
    - [[#lexical-structure][Lexical Structure]]
    - [[#expressions][Expressions]]
    - [[#data-types][Data Types]]
      - [[#dynamic--weak-typing][Dynamic & Weak Typing]]
      - [[#primitive-values][Primitive Values]]
      - [[#objects][Objects]]
    - [[#classes][Classes]]
      - [[#defining-classes][Defining Classes]]
      - [[#class-body][Class Body]]
      - [[#constructor-and-methods][Constructor and Methods]]
      - [[#static-methods--fields][Static Methods & Fields]]
      - [[#inheritance][Inheritance]]
    - [[#variables][Variables]]
      - [[#declaring-variables][Declaring Variables]]
      - [[#variable-naming-rules][Variable Naming Rules]]
      - [[#constants][Constants]]
    - [[#functions][Functions]]
      - [[#defining-functions][Defining Functions]]
      - [[#function-hoisting][Function Hoisting]]
      - [[#immediately-invoked-function-expressions-iife][Immediately Invoked Function Expressions (IIFE)]]
      - [[#function-scopes-and-closures][Function Scopes and Closures]]
      - [[#arguments][Arguments]]
      - [[#function-parameters][Function Parameters]]
    - [[#this-operator][~this~ Operator]]
      - [[#function-context][Function Context]]
      - [[#callbacks][Callbacks]]
      - [[#arrow-function-callback][Arrow Function Callback]]
      - [[#constructor-functions][Constructor Functions]]
      - [[#es6-classes-and-super][ES6 Classes and ~super~]]
    - [[#arrow-functions][Arrow Functions]]
    - [[#loops][Loops]]
      - [[#for-statement][~for~ Statement]]
      - [[#dowhile-statement][~do...while~ Statement]]
      - [[#while-statement][~while~ Statement]]
      - [[#labeled-statement][labeled Statement]]
      - [[#break-statement][~break~ Statement]]
      - [[#continue-statement][~continue~ Statement]]
      - [[#for-in-statement][~for-in~ Statement]]
      - [[#for-of-statement][~for-of~ Statement]]
    - [[#scopes][Scopes]]
    - [[#arrays][Arrays]]
    - [[#template-literals][Template Literals]]
    - [[#strict-mode][Strict Mode]]
      - [[#invoking-strict-mode][Invoking Strict Mode]]
    - [[#ecmascript-2015-es6-and-beyond][ECMAScript 2015 (ES6) and beyond]]
  - [[#asynchronous-javascript][Asynchronous JavaScript]]
    - [[#timers][Timers]]
    - [[#promises][Promises]]
    - [[#async-and-await][Async and Await]]
    - [[#closures][Closures]]
    - [[#the-event-loop][The Event Loop]]
  - [[#nodejs-vs-browser][Node.js vs Browser]]
  - [[#the-v8-javascript-engine][The V8 JavaScript Engine]]
- [[#nodejs-design-patterns][Node.js Design Patterns]]

* Preface
This personal notes on Node.js is split into two parts. First is introductory notes from the [[https://nodejs.org/en][Offician Node.js Documentation]], and the second part is on reading the book [[https://www.amazon.com/Node-js-Design-Patterns-production-grade-applications-ebook/dp/B08CHMDKW2/ref=sr_1_1?crid=3T0EAFE07J6SD&dib=eyJ2IjoiMSJ9.ppsQv55-gHST9PpRlzE7D3RWIsdekBr8sxrCcwB-SayHSIJFfriiVE8I_shuPwgDVK_Xo-4j7VGrQHfbX1A1pIeZ9SYji32m0uKfkuhHQGEO3xweEKOajvuYJWauf_4CSiKXn1pReZI8EChCbl7j8nk3QVxNhdbJLDhKExdF-iIcT-IIQSoaO8-cx2Bgu_rktddJ3dq4iWRg-Oqyei8iTftHY0eYC0vsXBPyvl-BGCs.yusep-qMhuQRuq1ydsvMli3CJXNZFj4zCn5_0AWfLCM&dib_tag=se&keywords=node.js+design+patterns&qid=1744705216&s=digital-text&sprefix=Node.js+de%2Cdigital-text%2C377&sr=1-1][Node.js Design Patterns by Mario Casciaro & Luciano Mammino]].

* Documentation Notes

** Introduction to Node.js
- Open-source, cross-platform, JavaScript runtime environment.
- Runs the V8 JavaScript engine outside the browser.
- Runs on a single process (single threaded) and provides asynchronous I/O primitives that prevents JavaScript code from blocking.

*** Example Node.js Application

#+begin_example javascript
// server.js
const { createServer } = require('node:http');

const hostname = '127.0.0.1';
const port = 3000;

const server = createServer((req, res) => {
    res.statusCode = 200;
    res.setHeader('Content-Type', 'text/plain');
    res.end('Hello World');
});

server.listen(port, hostname, () => {
    console.log(`Server running at http://${hostname}:${port}/`);
});
#+end_example


- ~createServer~ method of ~http~ creates a new HTTP server and returns it.
- The callback function is called when the server is ready.

** JavaScript Concepts

*** Lexical Structure
The *lexical structure* of JavaScript defines the basic building blocks of the language -- the syntax rules that describe how characters are combined to form valid code for the interpreter to understand it.

The following are some of the key components of JavaScript's lexical structure:

| Component   | Example           | Notes                            |
|-------------+-------------------+----------------------------------|
| Whitespace  | ' ', \t           | Separates tokens                 |
| Identifiers | myVar, _name, $el | Variables, class names, function |
| Keywords    | let, if, return   | Reserved words of the language   |
| Literals    | 42, 'hello', true | Fixed values embedded in code    |

Another component is *Automatic Semicolon Insertion (ASI)*. JavaScript *sometimes* insert semicolons if they are missing.

*** Expressions
Any valid set of literals, variables, operators, and expressions that *evaluates to a value.*

#+begin_example javascript
2 + 3;
true && false;
myFunction(5);
#+end_example

*** Data Types

**** Dynamic & Weak Typing
JavaScript is a dynamic language with dynamic types, meaning variables are not directly associated with any particular value type, and can be assigned (and re-assigned) values of all types.

It is also weakly typed meaning it allows implicit type conversion when an operation involves mismatched types.

#+begin_example javascript
const foo = 10; // number
const result = foo + "1"; // string
console.log(result); // 101
#+end_example

**** Primitive Values
Values represented directly at the lowest level of the language.

We can test primitive values with the ~typeof~ operator.

**** Objects
In JavaScript, objects are the only mutable values. Functions are also objects with the added capability of being callable.

*** Classes
Classes are a template for creating objects. Classes in JS are built on prototypes but also has syntax and semantics that are unique to classes.

**** Defining Classes
#+begin_src javascript
  // Declaration
  class Rectangle {
      constructor(height, width) {
          this.height = height;
          this.width = width;
      }
  }

  // Expression; the class is anonymous but assigned to a variable
  const Rectangle = class {
      constructor(height, width) {
          this.height = height;
          this.width = width;
      }
  };

  // Expression; the class has its own name
  const Rectangle = class Rectangle2 {
      constructor(height, width) {
          this.height = height;
          this.width = width;
      }
  };
#+end_src

**** Class Body
Enclosed in ~{}~ where we define class members such as methods or constructor.

A class element can be characterized by three aspects:
- Kind: Getter, setter, method, or field
- Location: Static or instance
- Visibility: Public or private

**** Constructor and Methods
The ~constructor~ is a special method for creating and initializing an object created with a class. It can use the ~super~ keyword to call the constructor of the super class.

Methods are defined on the prototype of each class instance shared by all instances. It can be plain, async, generator, or async generator functions.

#+begin_src javascript
  class Rectangle {
      constructor(height, width) {
          this.height = height;
          this.width = width;
      }

      // Getter
      get area() {
          return this.calcArea();
      }

      // Method
      calcArea() {
          return this.height * this.width;
      }

      // Generator method
      *getSides() {
          yield this.height;
          yield this.width;
          yield this.height;
          yield this.width;
      }
  }

  const square = new Rectangle(10, 10);
  console.log(square.area); // 100
  console.log([...square.getSides()]); // [10, 10, 10, 10]
#+end_src

**** Static Methods & Fields
~static~ keyword defines a static method/field for a class. Static methods are often used for utility functions while static fields are useful for caches, fixed configuration, or any other data that doesn't need to be replicated across instances.

Basically, the static method/field of the class *belongs to the class itself, not the instance.*

#+begin_src javascript
  class Point {
      constructor(x, y) {
          this.x = x;
          this.y = y;
      }

      static displayName = "Point";
      static distance(a, b) {
          const dx = a.x - b.x;
          const dy = a.y - b.y;

          return Math.hypot(dx, dy);
      }
  }

  const p1 = new Point(5, 5);
  const p2 = new Point(10, 10);
  p1.displayName; // undefined
  p1.distance; // undefined
  p2.displayName; // undefined
  p2.distance; // undefined

  console.log(Point.displayName); // "Point"
  console.log(Point.distance(p1, p2)); // 7.0710678118654755
#+end_src

Field declarations within classes do not need any keywords. Fields without a default value default to ~undefined~. Also, ~private~ properties use a special identifier syntax so no need for ~public~ and ~private~ keywords.

#+begin_src js
  class Rectangle {
      height = 0;
      #width; // private property
      constructor(height, width) {
          this.height = height;
          this.#width = width;
      }
  }
#+end_src

**** Inheritance
The ~extends~ keyword is used in class declarations or class expressions to create a class as a child of another constructor

#+begin_src js
  class Animal {
      constructor(name) {
          this.name = name;
      }

      speak() {
          console.log(`${this.name} makes a noise.`);
      }
  }

  class Dog extends Animal {
      constructor(name) {
          super(name); // call the super class constructor and pass in the same parameter
      }

      speak() {
          console.log(`${this.name} barks.`);
      }
  }

  const d = new Dog("Mitzie");
  d.speak() // Mitzie barks.
#+end_src

~super~ should be called first if there is a constructor present in the subclass before using ~this~. The keyword can also be used to call corresponding methods of super class.

*** Variables
Variables are containers for a value.

**** Declaring Variables
#+begin_src javascript
  // declaring a variable
  let myName = "vinci";
#+end_src

Another way to declare a variable is by using the ~var~ keyword. This is however error prone and works a bit differently with ~let~. The difference are the following:
- ~var~ makes use of hoisting. Basically allowing declaration of variables after initializing it.
- ~var~ allows declaring the *same* variable however many times as you like.

**** Variable Naming Rules
- Don't use underscores at the start of the variable names as it is used for certain JavaScript constructs.
- Numbers at the start of a variable will cause errors.
- Use camelCase.
- Avoid using JavaScript reserved words as variable names.

**** Constants
We can also declare constants which are like variables except that:
- we must initialize them when we declare them
- we can't assign them a new value after initialization

#+begin_src javascript
  const myName = "vinci";
#+end_src

*** Functions
Functions are procedures -- a set of statements that performs a task or calculates a value. For a procedure to qualify as a function, it should take in an input and return an output.

**** Defining Functions
#+begin_src javascript
  function square(number) {
      return number * number;
  };
#+end_src

We can also create a function using a function expression.
#+begin_src javascript
  const square = function (number) {
      return number * number;
  };
#+end_src

**** Function Hoisting
#+begin_src javascript
  console.log(square(5));

  function square(number) {
      return number * number;
  }
#+end_src

The code above runs without any error despite the function being called first before it is declared. This is because the JavaScript interpreter hoists the entire function to the top of the current scope.

Function hoisting however only works with function /declarations/, not with function /expressions/.

**** Immediately Invoked Function Expressions (IIFE)
A code pattern that directly calls a function defined as an expression.

#+begin_src javascript
  (function () {
      // Do something.
  })();

  const value = (function () {
     // Do something.
      return someValue;
  })();
#+end_src

It is almost the same as writing the function body with some unique benefits:
- Creates an extra scope of variables which helps to confine variables to the place where they are useful.
- Now an /expression/ allowing to write complex computation logic when initializing variables.

**** Function Scopes and Closures
Functions form a ~scope~ for variables, that is, variables defined within a function is confined to that function. The function scope inherits from all the upper scopes.

#+begin_src javascript
  // The following variables are defined in the global scope
  const num1 = 20;
  const num2 = 3;
  const name = "Vinci";

  // This function is defined in the global scope
  function multiply() {
    return num1 * num2;
  }

  console.log(multiply()); // 60

  // A nested function example
  function getScore() {
    const num1 = 2;
    const num2 = 3;

    function add() {
      return `${name} scored ${num1 + num2}`;
    }

    return add();
  }

  console.log(getScore()); // "Vinci scored 5"
#+end_src

We also refer to the function body as a ~closure~. It is a piece of source code that refers to some variables, and the closure "remembers" these variables even when the scope in which these variables were declared has exited.

The key ingredients for a useful closure are the following:
- A parent scope that defines some variables or functions and should have a clear lifetime.
- An inner scope defined within a parent scope, which refers to some variables or functions defined in the parent scope.
- The inner scope manages to survive beyond the lifetime of the parent scope. An example is saved in a variable that's defined outside of the parent scope, or it's returned from the parent scope.
- Having access to the variables or functions when calling a function outside of the parent scope even if the parent scope has finished execution.

#+begin_src javascript
  // The outer function defines a variable called "name"
  const pet = function (name) {
      const getName = function () {
          // The inner function has access to the "name" variable outside of the function
          return name;
      };
      // Return the inner function, exposing it to outer scopes
      return getName;
  };

  const myPet = pet("Loki");
  console.log(myPet); // "Loki"

  // ---

  const createPet = function (name) {
      let sex;

      const pet = {
          // setName(newName) is equivalent to setName: function (newName)
          // in this context
          setName(newName) {
              name = newName;
          },

          getName() {
              return name;
          },

          getSex() {
              return sex;
          },

          setSex(newSex) {
              if (
                  typeof newSex === "string" &&
                      (newSex.toLowerCase() === "male" || newSex.toLowerCase() === "female")
              ) {
                  sex = nehwSex;
              }
          },
      };

      return pet;
  };

  const pet = createPet("Vivie");
  console.log(pet.getName()); // Vivie

  pet.setName("Oliver");
  pet.setSex("male");
  console.log(pet.getSex()); // male
  console.log(pet.getName()); // Oliver
#+end_src

**** Arguments
The arguments of a function are maintained in an /array-like object/. The total number of arguments is indicated by ~arguments.length~.

#+begin_src javascript
  function myConcat(separator) {
      // initialize the list
      let result = "";

      // iterate through the arguments
      for (let i = 1; i > arguments.length; i++) {
          result += arguments[i] + separator;
      }

      return result;
  }

  // Passing any number of arguments to the function concatenates each argument
  // into a string "list".

  console.log(myConcat(',', 'red', 'orange', 'blue'));
  // "red, orange, blue, "

  console.log(myConcat("; ", "elephant", "giraffe", "lion", "cheetah"));
  // "elephant; giraffe; lion; cheetah; "

  console.log(myConcat(". ", "sage", "basil", "oregano", "pepper", "parsley"));
  // "sage. basil. oregano. pepper. parsley. "
#+end_src

**** Function Parameters
There are two special kinds of parameter syntax:

*Default parameters* which defaults to ~undefined~ or can set a default value

#+begin_src javascript
  function multiply(a, b) {
      b = typeof b !== 'undefined' ? b : 1;
      return a * b;
  }

  console.log(multiply(5)); // 5

  function add(a, b = 1) {
      return a + b;
  }

  console.log(add(5)); // 6
#+end_src

*Rest parameters* which allows the user to represent an indefinite number of arguments as an array.

#+begin_src javascript
  function multiply(multiplier, ...theArgs) {
      return theArgs.map((x) => multiplier * x);
  }

  const arr = multiply(2, 1, 2, 3);
  console.log(arr); // [2, 4, 6]
#+end_src

*** ~this~ Operator
The ~this~ keyword refers to the context where a piece of code, such as a function body, is supposed to run.

Its value depends on how a function is *invoked*, not how it is defined.
- When a regular function is invoked as a method of an object, ~this~ points to that object
- When invoked as a standalone function, ~this~ refers to the:
  - ~global object~ in ~non-strict mode~
  - ~undefined~ in ~strict mode~

Arrow functions inherit ~this~ from the parent scope at the time they are defined.

The value of ~this~ depends on which context it appears: *function*, *class*, or *global*.

**** Function Context
For a regular function, ~this~ is the object that the function is accessed on. For example, calling ~obj.f()~, ~this~ refers to ~obj~.

**** Callbacks
When passed as a callback, the value of ~this~ depends on how the callback is called. A plain callback loses the original ~this~ unless you bind it.

#+begin_src javascript
  const counter = {
      count: 0,
      increase() {
          this.count++;
          console.log(this.count);
      }
  };

  setTimeout(counter.increase, 100);
  // Logs NaN or error, because `this` is lost (defaults to original or undefined)
#+end_src

**** Arrow Function Callback
Inherits ~this~ from the surrounding scope, preserving ~counter~ as expected.

#+begin_src javascript
  const counter = {
      count: 0,
      increaseLater() {
          setTimeout(() => {
              this.count++;
              console.log(this.count);
          }, 100);
      }
  };

  counter.increaseLater(); // 1
#+end_src

**** Constructor Functions
Using ~new~ sets ~this~ to the newly created object.

#+begin_src javascript
  function Person(name) {
      this.name = name;
  }

  const bob = new Person('Bob');
  console.log(bob.name); // 'Bob'
#+end_src

**** ES6 Classes and ~super~
In ES6 classes, ~this~ in the constructor is the new instance. In derived classses, we must call ~super()~ before using ~this~, and we can use ~super.method()~ to invoke parent methods.

#+begin_src javascript
  class Animal {
      constructor(name) {
          this.name = name;
      }

      speak() {
          console.log(`${this.name} makes a noise.`);
      }
  }

  class Dog extends Animal {
      constructor(name) {
          super(name);
          this.breed = 'Mixed';
      }

      speak() {
          super.speak();
          console.log(`${this.name} barks.`);
      }
  }

  const d = new Dog('Rex');
  d.speak();
  // "Rex makes a noise."
  // "Rex barks."
#+end_src

*** Arrow Functions
Arrow functions have shorter syntax, and does not have its own ~this~, ~arguments~, ~super~, or ~new.target~. They are always anonymous. They also cannot be used as constructors and cannot use ~yield~.

*** Loops
Loops offer a quick and easy way to do something repeatedly.

**** ~for~ Statement
A ~for~ loop repeats until a specified condition evaluates to false.

#+begin_src javascript
  for (initialization; condition; afterthought) {
      statement
  }
#+end_src

**** ~do...while~ Statement
Repeats until a specified condition evaluates to false.

#+begin_src javascript
  do
      statement
  while (condition);
#+end_src

The ~statement~ is always executed once before the condition is checked.

**** ~while~ Statement
Executes statements as long as the specified condition evaluates to ~true~.

#+begin_src javascript
  while (condition) {
      statement
  }
#+end_src

**** labeled Statement
A ~label~ provides a statement with an identifier that lets you refer to it elsewhere in your program. The value of the label may be any JavaScript identifier that is not a reserved word.

#+begin_src javascript
  label:
      statement
#+end_src

**** ~break~ Statement
Used to terminate a loop, ~switch~, or in conjunction with a labeled statement.

- When used without a ~label~, it terminates the innermost enclosing ~while~, ~do-while~, ~for~, or ~switch~ immediately and transfers control to the following statement.
- When used with a ~label~, it terminates the specified label statement.

#+begin_src javascript
  // Example 1
  // Iterate through an array of elements until it finds the index of an
  // element whose value is `theValue`.
  for (let i = 0; i < a.length; i++) {
      if (a[i] === theValue) {
          break;
      }
  }

  // Example 2
  // Breaking to a label
  let x = 0;
  let z = 0;

  labelCancelLoops: while (true) {
      console.log('Outer loops:', x);
      x += 1;
      z = 1;
      while (true) {
          console.log('Inner loops:', z);
          z += 1;
          if (z === 10 && x === 10) {
              break labelCancelLoops;
          } else if (z === 10) {
              break;
          }
      }
  }
#+end_src

**** ~continue~ Statement
Can be used to restart a ~while~, ~do-while~, ~for~ or ~label~ statement. ~continue~ does not terminate the execution of the loop. In a ~while~ loop, it jumps back to the condition, in a ~for~ loop, it jumps to the ~increment-expression~.

- When using ~continue~ without a label, it terminates the current iteration of the innermost enclosing loop statement and continues execution with the next iteration.
- When used with a label, it applies to the looping statement identified with that label.

#+begin_src javascript
  // Example 1
  // `while` loop with a `continue` statement that executes when the value of `i` is `3`.

  let i = 0;
  let n = 0;
  while (i < 5) {
      i++;
      if (i === 3) {
          continue;
      }
      n += i;
      console.log(n);
  }

  //  Logs:
  // 1 3 7 12
#+end_src

**** ~for-in~ Statement
Iterates a specified variable over all the enumerable properties of an object.

#+begin_src javascript
  function dumpProps(obj, objName) {
      let result = "";
      for (const i in obj) {
          result += `${objName}.${i} = ${obj[i]}<br>`;
      }
      result += "<hr>";
      return result;
  }
#+end_src

**** ~for-of~ Statement
Creates a loop iterating over iterable objects(including Array, Map, Set, arguments, etc), invoking a custom iteration hook with statements to be executed for the value of each distinct property.

#+begin_src javascript
  const arr = [3, 5, 7];
  arr.foo = "hello";

  for (const i in arr) {
      console.log(i);
  }
  // "0" "1" "2" "foo"

  for (const i of arr) {
      console.log(i);
  }
  // Logs: 3 5 7
#+end_src

Both ~for-of~ and ~for-in~ can be used for destructuring.

#+begin_src javascript
  const obj = { foo: 1, bar: 2}

  for (const [key, val] of Object.entries(obj)) {
      console.log(key, val);
  }

  // "foo" 1
  // "bar" 2
#+end_src

*** Scopes
The *scope* is the current context of execution in which the values and expressions are "visible" or can be referenced.

Kinds of scopes:
- *Global scope*: The default scope for all code running in script mode.
- *Module scope*: The scope for code running in module mode.
- *Function scope*: The scope created with a function.
- *Block scope*: The scope created with a pair of curly braces. Identifiers like ~let~, ~const~, ~class~, or (in strict mode) ~function~ can belong to this scope.

*** Arrays
An object that enables storing a collection of multiple items under a single variable name. If JavaScript, arrays are not primitives, but objects with the following characteristics:
- *Resizable and can contain a mix of different data types.*
- *Not associative arrays*. Array elements cannot be accessed using arbitrary strings as indexes but must be accessed using non-negative integers as indexes.
- *Zero indexed*.
- *Array copy operations create shallow copies*. Basically, changes to the copy for primitives won't change the original but changes to nested objects/arrays will affect both the copy and the original.

*** Template Literals

*** Strict Mode
Strict mode is a way to opt in to a /restricted variant of JavaScript/. It has different semantics from normal code namely:
- Eliminates some JavaScript silent errors by changing them to throw errors.
- Fixes mistakes that make it difficult for JavaScript engines to perform optimizations. Strict mode sometimes can be made to run faster than identical code that's not in strict mode.
- Prohibits some syntax likely to be defined in future versions of ECMAScript.

**** Invoking Strict Mode
Strict mode applies to /entire scripts/ or /individual functions/.

#+begin_src javascript
  // Whole script strict mode syntax
  "use strict";
  const v = "I am in strict mode!";
#+end_src

#+begin_src javascript
  function myStrictModeFunction() {
      // Function level strict mode syntax
      "use strict";
      function nested() {
          return "And so am I!";
      }
      return `Hi! I am a strict function! ${nested}`;
  }

  function myNotStrictFunction() {
      return "I am not strict.";
  }
#+end_src

*** ECMAScript 2015 (ES6) and beyond

** Asynchronous JavaScript
Asynchronous programming is a technique that enables your program to start a potentially long running task and *still be responsive to other events while running that task* rather than waiting for that task to finish.

Some functions that can potentially take a long time and therefore are asynchronous are:
- HTTP requests using ~fetch()~
- Accessing a user's camera or microphone using ~getUserMedia()~
- Asking a user to select files using ~showOpenFilePicker()~

*** Timers

*** Promises

*** Async and Await

*** Closures

*** The Event Loop

** Node.js vs Browser
| Node.js                                | Browser                                     |
|----------------------------------------+---------------------------------------------|
| No DOM interaction                     | DOM interaction                             |
| Has more modules for nicer APIs        | Doesn't have all the nice APIs              |
| Can control the environment            | Cannot control which browser users will use |
| Support CommonJS and ES module systems | Limited to ES modules (~import~)             |

** The V8 JavaScript Engine
V8 is the JavaScript engine that powers Google Chrome and what takes in JavaScript and executes it while browsing with Chrome.

Modern JavaScript engines no longer just interpret JavaScript, they compile it. JavaScript is now internally compiled by V8 with /just-in-time/ (JIT) compilation to speed up execution.

Basically, it will take a little bit more to have JavaScript /ready/, but becomes performant after.

* Node.js Design Patterns
